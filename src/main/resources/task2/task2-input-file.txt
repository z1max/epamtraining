INSERTING DATA USING JDBC TEMPLATE.

All that a JdbcTemplate needs in order to do its work is a DataSource . This makes it easy enough to configure a JdbcTemplate bean in Spring with the following @Bean method:

    @Bean
    public JdbcTemplate jdbcTemplate(DataSource dataSource) {
        return new JdbcTemplate(dataSource);
    }

Here, the DataSource is injected via constructor injection. The dataSource bean being referenced can be any implementation of javax.sql.DataSource, including those you created in section 10.2.

Now you can wire the jdbcTemplate bean into your repository and use it to access the database. For example, suppose the Spitter repository is written to use JdbcTemplate:

    @Repository
    public class JdbcSpitterRepository implements SpitterRepository {
        private JdbcOperations jdbcOperations;
        @Inject
        public JdbcSpitterRepository(JdbcOperations jdbcOperations) {
            this.jdbcOperations = jdbcOperations;
        }
    ...
    }

Here JdbcSpitterRepository is annotated with @Repository, which qualifies it to be automatically created by component-scanning. And its constructor is annotated with @Inject so that when it’s created, it will be given a JdbcOperations object. JdbcOperations is an interface defining operations implemented by JdbcTemplate. By injecting a JdbcOperations instead of the concrete JdbcTemplate, JdbcSpitterRepository is able to remain loosely coupled to JdbcTemplate via the JdbcOperations interface.

As an alternative to component-scanning and autowiring, you could explicitly declare JdbcSpitterRepository as a bean in Spring, like this:

    @Bean
    public SpitterRepository spitterRepository(JdbcTemplate jdbcTemplate) {
        return new JdbcSpitterRepository(jdbcTemplate);
    }

With a JdbcTemplate at your repository’s disposal, you can greatly simplify the addSpitter() method from listing 10.4. The new JdbcTemplate-based addSpitter() method is as follows.

Listing 10.7 JdbcTemplate-based addSpitter() method.

    public void addSpitter(Spitter spitter) {
        jdbcOperations.update(INSERT_SPITTER,
            spitter.getUsername(),
            spitter.getPassword(),
            spitter.getFullName(),
            spitter.getEmail(),
            spitter.isUpdateByEmail());
    }

I think you’ll agree that this version of addSpitter() is significantly simpler. There’s no more connection or statement-creation code—and no more exception-handling code. There’s nothing but pure data-insertion goodness.

Just because you don’t see a lot of boilerplate code doesn’t mean it’s not there. It’s cleverly hidden in the JDBC template class. When the update() method is called, JdbcTemplate gets a connection, creates a statement, and executes the insert SQL.

What you also don’t see is how the SQLException is handled. Internally, JdbcTemplate catches any SQLExceptions that may be thrown. It then translates the generic SQLException into one of the more specific data-access exceptions from table 10.1 and rethrows it. Because Spring’s data-access exceptions are all runtime exceptions, you don’t have to catch them in the addSpitter() method.